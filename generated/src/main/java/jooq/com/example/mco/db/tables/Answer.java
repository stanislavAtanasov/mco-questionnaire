/*
 * This file is generated by jOOQ.
 */
package com.example.mco.db.tables;


import com.example.mco.db.DevMco;
import com.example.mco.db.Indexes;
import com.example.mco.db.Keys;
import com.example.mco.db.tables.records.AnswerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Answer extends TableImpl<AnswerRecord> {

    private static final long serialVersionUID = 878710214;

    /**
     * The reference instance of <code>dev_mco.ANSWER</code>
     */
    public static final Answer ANSWER = new Answer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AnswerRecord> getRecordType() {
        return AnswerRecord.class;
    }

    /**
     * The column <code>dev_mco.ANSWER.ID</code>.
     */
    public final TableField<AnswerRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>dev_mco.ANSWER.MAIL</code>.
     */
    public final TableField<AnswerRecord, String> MAIL = createField("MAIL", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>dev_mco.ANSWER.PHONE_NUMBER</code>.
     */
    public final TableField<AnswerRecord, String> PHONE_NUMBER = createField("PHONE_NUMBER", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>dev_mco.ANSWER.FULL_NAME</code>.
     */
    public final TableField<AnswerRecord, String> FULL_NAME = createField("FULL_NAME", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>dev_mco.ANSWER.AGE</code>.
     */
    public final TableField<AnswerRecord, Long> AGE = createField("AGE", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>dev_mco.ANSWER.LAST_UPDATED</code>.
     */
    public final TableField<AnswerRecord, LocalDateTime> LAST_UPDATED = createField("LAST_UPDATED", org.jooq.impl.SQLDataType.LOCALDATETIME.defaultValue(org.jooq.impl.DSL.field("NOW()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>dev_mco.ANSWER</code> table reference
     */
    public Answer() {
        this(DSL.name("ANSWER"), null);
    }

    /**
     * Create an aliased <code>dev_mco.ANSWER</code> table reference
     */
    public Answer(String alias) {
        this(DSL.name(alias), ANSWER);
    }

    /**
     * Create an aliased <code>dev_mco.ANSWER</code> table reference
     */
    public Answer(Name alias) {
        this(alias, ANSWER);
    }

    private Answer(Name alias, Table<AnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Answer(Name alias, Table<AnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Answer(Table<O> child, ForeignKey<O, AnswerRecord> key) {
        super(child, key, ANSWER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DevMco.DEV_MCO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ANSWER_MAIL_INDEX, Indexes.CONSTRAINT_INDEX_7, Indexes.PRIMARY_KEY_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AnswerRecord, Long> getIdentity() {
        return Keys.IDENTITY_ANSWER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AnswerRecord> getPrimaryKey() {
        return Keys.ANSWER_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AnswerRecord>> getKeys() {
        return Arrays.<UniqueKey<AnswerRecord>>asList(Keys.ANSWER_PK, Keys.CONSTRAINT_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Answer as(String alias) {
        return new Answer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Answer as(Name alias) {
        return new Answer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(String name) {
        return new Answer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Answer rename(Name name) {
        return new Answer(name, null);
    }
}
